<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on The ABS Modeling Language</title>
    <link>https://abs-models.org/documentation/tutorials/</link>
    <description>Recent content in Tutorials on The ABS Modeling Language</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Mar 2018 12:21:52 +0100</lastBuildDate>
    
	<atom:link href="https://abs-models.org/documentation/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Language Tutorial</title>
      <link>https://abs-models.org/documentation/tutorials/language-tutorial/</link>
      <pubDate>Thu, 22 Mar 2018 12:22:10 +0100</pubDate>
      
      <guid>https://abs-models.org/documentation/tutorials/language-tutorial/</guid>
      <description>This tutorial is partially adapted but needs updating to the newest language and tool features
1 Installation of the ABS Eclipse Plugin ABS fills a gap in the landscape of software modeling languages. It is situated between architectural, design-oriented, foundational, and implementation-oriented languages [25] For trying out the examples provided in this tutorial you will need the ABS Eclipse plugin. To install it, follow the simple instructions at http://tools. hats-project.eu/eclipseplugin/installation.html. You will need at least Eclipse version 3.</description>
    </item>
    
    <item>
      <title>Resource Modeling Tutorial</title>
      <link>https://abs-models.org/documentation/tutorials/resources/</link>
      <pubDate>Tue, 04 Jul 2017 09:31:38 +0200</pubDate>
      
      <guid>https://abs-models.org/documentation/tutorials/resources/</guid>
      <description>Core ABS   ABS is a modeling language which combines functional and imperative programming styles to develop high-level executable models. Concurrent object groups execute in parallel and communicate through asynchronous method calls. To intuitively capture internal computation inside a method, we use a simple functional language based on user-defined algebraic data types and functions. Thus, the modeler may abstract from the details of low-level imperative implementations of data structures, and still maintain an overall object-oriented design which is close to the target system.</description>
    </item>
    
    <item>
      <title>Resource Analysis with CostABS</title>
      <link>https://abs-models.org/documentation/tutorials/costabs/</link>
      <pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://abs-models.org/documentation/tutorials/costabs/</guid>
      <description>CostABS is a a static analyzer for automatically inferring upper/lower bounds on the worst/best-case Resource usage (a.k.a. cost) of ABS programs. The inferred upper bounds have important applications in the fields of program optimization, verification and certification. CostABS is parametric on the cost model, i.e., the type of cost that the user wants to infer (e.g., number of steps, amount of memory allocated, amount of data transmitted, etc.), and it supports different notions of cost such as sequential, parallel, peak, etc.</description>
    </item>
    
    <item>
      <title>May-Happen-in-Parallel Analysis</title>
      <link>https://abs-models.org/documentation/tutorials/mhp/</link>
      <pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://abs-models.org/documentation/tutorials/mhp/</guid>
      <description>May-Happen-in-Parallel Analysis (MHP)   ABS is a distributed language where different methods can be invoked asynchronously. Therefore, there can be several tasks executing their code at the same time. This simultaneity complicates the analysis and understanding of ABS programs, since (in general) there is a high level of parallelism. The MHP analysis alleviates this situation by computing, for each instruction, which other instructions could execute in parallel. This information can be very interesting for developers and testers, but it is crucial for the precision of many of the SACO analyses presented in the CostABS tutorial.</description>
    </item>
    
    <item>
      <title>Resource Analysis with SRA</title>
      <link>https://abs-models.org/documentation/tutorials/sra/</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://abs-models.org/documentation/tutorials/sra/</guid>
      <description>General Overview We prototype a static analysis technique that computes upper bounds of virtual machine usages in a dialect of ABS, called vml, whose syntax will be covered by the examples in this tutorial, with explicit acquire and release operations of virtual machines. In our language it is possible to delegate other (ad-hoc or third party) concurrent code to release virtual machines (by passing them as arguments of invocations). Our technique is modular and consists of (i) a type system associating programs with behavioural types that records relevant information for resource usage (creations, releases, and concurrent operations), (ii) a translation function that takes behavioural types and return cost equations.</description>
    </item>
    
  </channel>
</rss>