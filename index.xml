<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The ABS Language on The ABS Modeling Language</title>
    <link>http://abs-models.org/</link>
    <description>Recent content in The ABS Language on The ABS Modeling Language</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Mar 2018 12:21:59 +0100</lastBuildDate>
    
	<atom:link href="http://abs-models.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installing Command-Line Tools</title>
      <link>http://abs-models.org/getting_started/local-install/</link>
      <pubDate>Wed, 15 Aug 2018 09:22:58 +0200</pubDate>
      
      <guid>http://abs-models.org/getting_started/local-install/</guid>
      <description>Many of the tools can be run from the command line. This chapter describes how to run various tools on a local machine.
Installing the ABS Compiler To install the ABS compiler, install the Java 8 JDK and Erlang (version 21 or higher). Then, clone the git repository and build the compiler:
git clone https://github.com/abstools/abstools.git cd abstools/frontend ./gradlew assemble  After a successful build, there is an absc shell script in the abstools/frontend/bin/bash/ directory that invokes the ABS compiler.</description>
    </item>
    
    <item>
      <title>Running a Browser-Based IDE</title>
      <link>http://abs-models.org/getting_started/docker/</link>
      <pubDate>Wed, 15 Aug 2018 09:20:37 +0200</pubDate>
      
      <guid>http://abs-models.org/getting_started/docker/</guid>
      <description>The collaboratory is a browser-based development environment for ABS. It integrates an editor, the syntax checker and simulator, and the SACO resource analysis tool.
Running the Collaboratory using Docker To run the collaboratory, first install docker from https://www.docker.com. Then, run the following command in a terminal window:
docker run -d --rm -p 8080:80 --name collaboratory abslang/collaboratory:latest  When the command has finished, connect a browser to http://localhost:8080 and start using ABS!</description>
    </item>
    
    <item>
      <title>Installing Editor Support</title>
      <link>http://abs-models.org/getting_started/editor-support/</link>
      <pubDate>Wed, 05 Sep 2018 09:46:58 +0200</pubDate>
      
      <guid>http://abs-models.org/getting_started/editor-support/</guid>
      <description>We provide support for Emacs, Atom and Visual Studio Code.
Emacs The abs-mode package provides support for ABS in the Emacs editor.
Installation instructions are at https://github.com/abstools/abs-mode.
Atom The Atom editor support can be found at https://github.com/abstools/language-abs. ABS support for Atom currently cannot be installed from the offical Package repository and has to be installed manually; see https://github.com/abstools/language-abs for instructions.
Visual Studio Code ABS editing support for Visual Studio Code is at https://github.</description>
    </item>
    
    <item>
      <title>CostABS</title>
      <link>http://abs-models.org/tutorials/costabs/</link>
      <pubDate>Thu, 07 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://abs-models.org/tutorials/costabs/</guid>
      <description>CostABS is a a static analyzer for automatically inferring upper/lower bounds on the worst/best-case Resource usage (a.k.a. cost) of ABS programs. The inferred upper bounds have important applications in the fields of program optimization, verification and certification. CostABS is parametric on the cost model, i.e., the type of cost that the user wants to infer (e.g., number of steps, amount of memory allocated, amount of data transmitted, etc.), and it supports different notions of cost such as sequential, parallel, peak, etc.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>http://abs-models.org/tutorials/resources/</link>
      <pubDate>Tue, 04 Jul 2017 09:31:38 +0200</pubDate>
      
      <guid>http://abs-models.org/tutorials/resources/</guid>
      <description>An introduction to time and resource modeling in ABS.
Core ABS ABS is a modeling language which combines functional and imperative programming styles to develop high-level executable models. Concurrent object groups execute in parallel and communicate through asynchronous method calls. To intuitively capture internal computation inside a method, we use a simple functional language based on user-defined algebraic data types and functions. Thus, the modeler may abstract from the details of low-level imperative implementations of data structures, and still maintain an overall object-oriented design which is close to the target system.</description>
    </item>
    
  </channel>
</rss>